/* 
链表和数组作为算法中的两个基本数据结构，在程序设计过程中经常用到。尽管两种结构都可以用来存储一系列的数据，但又各有各的特点。

数组的优势：在于可以方便的遍历查找需要的数据。在查询数组指定位置的操作中，只需要一次操作即可，事件复杂度为O(1)。但是这种
时间上的遍历性，是因为数组在内存中占用了连续的空间，在进行类似的查找或遍历时，本质是指针在内存中的定向偏移。然而，当需要对数组成员进行
添加和删除操作时，数组内完成这类操作的时间复杂度则变为O(n)。

链表的特性：使其在某些操作上比数组更加高效。例如当进行插入和删除操作时，链表操作的时间复杂度仅为O(1)，另外，因为链表在内存中不是连续存储的
所以可以充分利用内存中的碎片空间。除此之外，链表还是很多算法的基础，最常见的哈希表就是基于链表来实现的。基于以上原因，我们可以看到，链表在程序
设计中是非常重要的。
*/

/* 
单向链表
    头指针：指向链表的第一个节点
    链表节点：包括key和next指针
            key:可以是数据或卫星数据的地址
            next:指针指向下一个链表节点
    和数组区别，地址离散：它在内存地址中可以离散的分配，由于它是离散的分配，所以他可以省去很多的麻烦，
不像数组由于预留空间不足经常需要拷贝，分配新的内存地址。
    总体上还是线性的数据，属于链式排列。

*/
function ListNode(key){ // 节点就是单纯的一个数据结构，不需要其他方法。
    this.key = key // 传入的key
    this.next = null // 初始化时，下一个节点指向null
}
// 表示单向链表
class LinkedList{ // 使用class，可以添加其他方法
    constructor(){
        this.head = null // 初始化时，头指针指向null
    }
}
/* 
const list = new LinkedList()
const node = new ListNode(1)
list.head = node
// 当前的链表结构
LinkedList: {
  head: ListNode{
    key:1,
    next:null
  }
}
*/


